This project is developed for NSLS II magnet unit conversion, between engineering unit (Ampere for example), 
physics unit (Tesla for example), and model unit (K1, K2 for example).

It uses IRMIS 3 schema, which is developed by D. Dohan at NSLS II, with minor modification. For the future 
maintenance purpose, it uses the same architecture with the pyirmis project.

Required package:
(inherited from pyirmis project. To be optimized later.)
Django (suggest version: 1.4.x)
MySQL-python  (suggest version: 1.2.x)

for unit conversion, it needs 
numpy (>=1.6.0)
scipy (>=0.11.0)

RDB configuration:
the RDB configuration is stored in credentials.py under physics_dev/physics_django with following contents:

DATABASES = {
             'default': {
                         'ENGINE':  'django.db.backends.mysql',  # 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
                         'NAME':    'your database name',        # Or path to database file if using sqlite3.
                         'USER':    'your rdb user name',        # Not used with sqlite3.
                         'PASSWORD':'your password',             # Not used with sqlite3.
                         'HOST':    'your rdb server',           # Set to empty string for localhost. Not used with sqlite3.
                         'PORT':    '3306'                       # Set to empty string for default. Not used with sqlite3.
                         }
             }
If the RDB server is accessed thru socket, set HOST to the mysqld.sock path.

start server
1. from command line under *nix like system with bash:
   go to demo
   $ sh start_server
2. launch from IDE, eclipse for example:
   set environment variable:
   in case of eclipse, add string substitution variables
   DJANGO_MANAGE_LOCATION
   set it to 
   physics_dev/physics_django/manage.py 